---
description: FlexSpace Pro 체육관 관리 시스템 전용 AI 개발 가이드라인 - React + TypeScript + Firebase + Vite
globs:
alwaysApply: true
---

## 🎯 FlexSpace Pro 개발 지침서

FlexSpace Pro는 체육관 통합 관리 시스템으로, React 18 + TypeScript + Vite + Firebase + Tailwind CSS 기술 스택을 사용합니다. 모든 AI 어시스턴트는 이 가이드라인을 엄격히 준수하여 일관성 있고 고품질의 코드를 생성해야 합니다.

## 🏗️ 프로젝트 아키텍처 개요

### 기술 스택
- **프론트엔드**: React 18.2.0+ (함수형 컴포넌트 + Hooks)
- **타입 시스템**: TypeScript 5.0+
- **빌드 도구**: Vite 5.0+
- **스타일링**: Tailwind CSS 3.3+
- **아이콘**: Lucide React 0.400+
- **백엔드**: Firebase 10.0+ (Auth, Firestore, Functions, Storage)

### 프로젝트 구조
```
flexspace-pro/
├── components/           # React 컴포넌트
│   ├── AdminSection.tsx     # 관리자 운영 관리
│   ├── BookingSection.tsx   # 체육관 대관
│   ├── ProgramSection.tsx   # 프로그램 관리
│   ├── Dashboard.tsx        # 대시보드
│   ├── Navigation.tsx       # 네비게이션
│   ├── LoginForm.tsx        # 로그인 폼
│   ├── UserManagement.tsx   # 회원 관리
│   └── DashboardCalendar.tsx # 캘린더
├── hooks/               # 커스텀 React Hooks
│   ├── use-auth.ts         # 인증 훅
│   └── use-firestore.ts    # Firestore 데이터 훅
├── types.ts            # TypeScript 타입 정의
├── utils.ts            # 유틸리티 함수
├── firebase.ts         # Firebase 설정
└── App.tsx            # 메인 애플리케이션
```

---

## 📋 Phase 1: FlexSpace Pro 코드베이스 분석

### 1.1 필수 확인 사항
**모든 작업 시작 전 다음을 반드시 확인:**

1. **기존 파일 존재 여부 확인**
   ```bash
   # 다음 파일들의 존재 여부를 먼저 확인
   - components/[작업할 컴포넌트].tsx
   - hooks/use-auth.ts
   - hooks/use-firestore.ts
   - types.ts
   - utils.ts
   - firebase.ts
   ```

2. **타입 정의 확인**
   - `types.ts`에서 필요한 인터페이스가 이미 정의되어 있는지 확인
   - 새로운 타입 추가 시 기존 타입과의 호환성 검증

3. **Firebase 설정 상태 확인**
   - `firebase.ts` 파일의 현재 설정 내용
   - 사용 중인 Firebase 서비스 (Auth, Firestore, Functions, Storage)

### 1.2 FlexSpace Pro 데이터 모델
```typescript
// 핵심 타입 정의 - types.ts에서 확인 필요
export type UserRole = 'user' | 'admin'
export type BookingStatus = 'pending' | 'approved' | 'rejected' | 'cancelled' | 'completed'
export type BookingCategory = 'class' | 'event' | 'club' | 'personal'
export type ProgramLevel = 'beginner' | 'intermediate' | 'advanced'
export type ProgramCategory = 'yoga' | 'pilates' | 'fitness' | 'dance' | 'badminton' | 'pickleball'
export type ActiveTab = 'dashboard' | 'booking' | 'program' | 'admin' | 'userManagement' | 'facilities'
```

### 1.3 Firebase 컬렉션 구조
```typescript
// COLLECTIONS 상수 - types.ts에서 확인
export const COLLECTIONS = {
  USERS: 'users',
  BOOKINGS: 'bookings',
  PROGRAMS: 'programs',
  APPLICATIONS: 'applications',
  FACILITIES: 'facilities',
  NOTIFICATIONS: 'notifications',
  SYSTEM_CONFIG: 'system_config',
} as const
```

---

## 📝 Phase 2: FlexSpace Pro 개발 계획 수립

### 2.1 코드 중복 방지 원칙
**절대적 규칙: 기존 코드를 먼저 읽고 분석한 후, 누락된 기능만 추가**

1. **기존 컴포넌트 확인 절차**
   ```typescript
   // 1. 파일 존재 확인
   // 2. 기존 Props 인터페이스 확인
   // 3. 현재 구현된 기능 목록 작성
   // 4. 요청된 기능과 비교하여 누락 부분만 식별
   // 5. 기존 코드 스타일 및 패턴 유지
   ```

2. **Hook 중복 방지**
   ```typescript
   // use-auth.ts와 use-firestore.ts 기존 기능 확인 필수
   // 새로운 함수 추가 시 기존 함수와 중복되지 않도록 주의
   ```

### 2.2 FlexSpace Pro 컴포넌트별 역할

#### Dashboard.tsx - 대시보드
- **일반 사용자**: 개인 통계, 최근 활동, 개인 캘린더
- **관리자**: 전체 통계, 대기 신청, 전체 캘린더
- **공통**: 역할별 조건부 렌더링

#### BookingSection.tsx - 체육관 대관
- 목록 뷰 / 캘린더 뷰 전환
- 신규 대관 신청 폼
- 대관 상태 관리 (pending → approved → completed)
- 반복 대관 지원

#### ProgramSection.tsx - 프로그램 관리
- 프로그램 카드 그리드 레이아웃
- 검색 및 다중 필터링 (카테고리, 요일, 시간, 레벨)
- D-Day 카운터 표시
- 프로그램 신청 처리

#### AdminSection.tsx - 관리자 운영
- 수강생/팀 직접 등록
- 대기중인 신청 승인/거절
- 운영 통계 대시보드
- 관리자 전용 기능

### 2.3 개발 우선순위
1. **Core Infrastructure**: 인증, 데이터 연동, 네비게이션
2. **User Features**: 대시보드, 대관 신청, 프로그램 신청
3. **Admin Features**: 관리자 도구, 승인 시스템
4. **Optimization**: 성능 최적화, 에러 처리

---

## 🔧 Phase 3: FlexSpace Pro 구현 실행

### 3.1 React 컴포넌트 구현 규칙

#### 3.1.1 컴포넌트 기본 구조
```typescript
import React, { useState, useMemo, useCallback } from 'react'
import { User, Booking, Program, ActiveTab } from '../types'
import { Calendar, Users, BookOpen } from 'lucide-react'

interface ComponentProps {
  // Props 타입 정의
}

const ComponentName: React.FC<ComponentProps> = ({ ...props }) => {
  // 1. useState 훅들
  // 2. useMemo로 계산된 값들
  // 3. useCallback으로 최적화된 함수들
  // 4. JSX 반환

  return (
    <div className="max-w-6xl mx-auto p-6">
      {/* Tailwind CSS 클래스 사용 */}
    </div>
  )
}

export default ComponentName
```

#### 3.1.2 Tailwind CSS 스타일 가이드
```typescript
// 카드 스타일
"bg-white rounded-2xl shadow-sm border border-gray-100"

// 버튼 스타일
"px-4 py-2 bg-blue-600 text-white rounded-xl hover:bg-blue-700 transition-colors"

// 상태 배지
"px-3 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800"

// 반응형 그리드
"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
```

### 3.2 Firebase 연동 패턴

#### 3.2.1 인증 Hook (use-auth.ts)
```typescript
interface UseAuthReturn {
  user: User | null
  loading: boolean
  error: string | null
  signInWithGoogle: () => Promise<void>
  signInWithEmail: (email: string, password: string) => Promise<void>
  signOut: () => Promise<void>
  isAdmin: boolean
  isAuthenticated: boolean
}
```

#### 3.2.2 Firestore Hook (use-firestore.ts)
```typescript
export const useFirestore = () => {
  const [bookings, setBookings] = useState<Booking[]>([])
  const [programs, setPrograms] = useState<Program[]>([])
  const [applications, setApplications] = useState<ProgramApplication[]>([])

  // CRUD 함수들
  const createBooking = async (data: CreateBookingData) => { /* */ }
  const updateBookingStatus = async (id: string, status: BookingStatus) => { /* */ }

  return {
    bookings, programs, applications,
    createBooking, updateBookingStatus,
    loading, error
  }
}
```

### 3.3 상태 관리 패턴

#### 3.3.1 Props Drilling 방식 사용
```typescript
// App.tsx에서 모든 상태 관리
function App() {
  const { user, isAdmin } = useAuth()
  const { bookings, programs, applications, ...crudFunctions } = useFirestore()
  const [activeTab, setActiveTab] = useState<ActiveTab>('dashboard')

  // 컴포넌트별 필요한 데이터와 함수만 전달
}
```

#### 3.3.2 성능 최적화
```typescript
// useMemo로 계산 비용이 큰 데이터 최적화
const myBookings = useMemo(() =>
  bookings.filter(b => b.userId === user?.id)
    .sort((a, b) => new Date(b.startDate).getTime() - new Date(a.startDate).getTime()),
  [bookings, user?.id]
)

// useCallback으로 함수 최적화
const handleApply = useCallback(async (programId: string) => {
  // 프로그램 신청 로직
}, [user, applications])
```

### 3.4 에러 처리 및 사용자 피드백

#### 3.4.1 Firebase 에러 처리
```typescript
try {
  await createBooking(bookingData)
  // 성공 피드백
} catch (error) {
  if (error instanceof FirebaseError) {
    switch (error.code) {
      case 'permission-denied':
        setError('권한이 없습니다.')
        break
      case 'unavailable':
        setError('서비스가 일시적으로 사용할 수 없습니다.')
        break
      default:
        setError('오류가 발생했습니다. 다시 시도해주세요.')
    }
  }
}
```

#### 3.4.2 로딩 상태 관리
```typescript
const [loading, setLoading] = useState(false)

const handleSubmit = async () => {
  setLoading(true)
  try {
    // 비동기 작업
  } finally {
    setLoading(false)
  }
}
```

---

## 🔒 FlexSpace Pro 보안 규칙

### Firestore Security Rules
```javascript
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // 사용자는 자신의 데이터만 접근
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // 대관 데이터
    match /bookings/{bookingId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null &&
        (request.auth.uid == resource.data.userId ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // 관리자만 전체 접근
    match /{document=**} {
      allow read, write: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
```

---

## ✅ 품질 검증 체크리스트

### 코드 품질
- [ ] TypeScript 컴파일 오류 없음
- [ ] ESLint 경고 최소화
- [ ] 기존 코드 스타일 일관성 유지
- [ ] 중복 코드 없음 (기존 파일 확인 완료)

### 기능 검증
- [ ] 사용자 인증 플로우 정상 동작
- [ ] 역할별 접근 제어 정확성
- [ ] 실시간 데이터 업데이트 동작
- [ ] 반응형 디자인 적용

### Firebase 연동
- [ ] Firestore 보안 규칙 적용
- [ ] 실시간 리스너 정상 동작
- [ ] 에러 처리 완전성
- [ ] 성능 최적화 (불필요한 읽기/쓰기 방지)

### FlexSpace Pro 특화 검증
- [ ] 대관 신청 플로우 완전성
- [ ] 프로그램 신청 시스템 정상 동작
- [ ] 관리자 승인 시스템 동작
- [ ] 캘린더 뷰 정확성
- [ ] D-Day 계산 정확성

---

## 🚨 중요 주의사항

### 절대 금지 사항
1. **기존 파일을 읽지 않고 새로 작성하는 것**
2. **동일한 기능의 중복 구현**
3. **기존 타입 정의 무시**
4. **Firebase 보안 규칙 미적용**
5. **성능 고려 없는 구현**

### 필수 준수 사항
1. **Read 도구로 기존 파일 확인 후 작업**
2. **타입 정의 재사용 (types.ts 활용)**
3. **기존 스타일 가이드 유지**
4. **React 18 Hooks 패턴 사용**
5. **Tailwind CSS 클래스 활용**

---

## 🎯 응답 구조 템플릿

모든 AI 어시스턴트는 다음 구조로 응답해야 합니다:

```
## 📋 Phase 1: 기존 코드 분석
- 확인한 파일: [파일 목록]
- 기존 기능: [현재 구현된 기능]
- 누락 기능: [추가해야 할 기능]

## 📝 Phase 2: 구현 계획
- 추가할 기능: [구체적 기능 목록]
- 사용할 타입: [types.ts의 기존 타입]
- 연동할 Hook: [use-auth.ts, use-firestore.ts]

## 🔧 Phase 3: 코드 구현
[실제 코드 구현]

## ✅ 검증 결과
- TypeScript 컴파일: [성공/실패]
- 기능 테스트: [항목별 결과]
- 보안 검증: [Firebase 규칙 적용 여부]
```

---

**FlexSpace Pro는 체육관 통합 관리의 혁신입니다. 모든 코드는 사용자 경험과 관리 효율성을 최우선으로 고려하여 구현되어야 합니다.**