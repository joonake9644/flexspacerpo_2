rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // 사용자(users) - 강화된 보안
    match /users/{userId} {
      // 읽기: 인증된 사용자는 모든 사용자 목록을 읽을 수 있음 (관리자 기능을 위해)
      allow read: if request.auth != null;

      // 쓰기: 본인 또는 관리자만 수정 가능 (adminRole 기반)
      allow write: if request.auth != null &&
                      (request.auth.uid == userId ||
                       hasAdminRole());
    }

    // 시설(facilities) - 강화된 보안
    match /facilities/{facilityId} {
      // 읽기: 인증된 사용자는 누구나 시설 정보를 읽을 수 있음
      allow read: if request.auth != null;

      // 쓰기: 관리자만 시설 정보를 생성, 수정, 삭제 가능 (adminRole 기반)
      allow write: if request.auth != null && hasAdminRole();
    }

    // 프로그램(programs) - 강화된 보안
    match /programs/{programId} {
      // 읽기: 인증된 사용자는 누구나 프로그램 정보를 읽을 수 있음
      allow read: if request.auth != null;

      // 쓰기: 관리자만 프로그램 정보를 생성, 수정, 삭제 가능 (adminRole 기반)
      allow write: if request.auth != null && hasAdminRole();
    }

    // 예약(bookings) - 강화된 보안
    match /bookings/{bookingId} {
      // 읽기: 인증된 사용자는 모든 예약을 읽을 수 있음 (클라이언트에서 필터링)
      allow read: if request.auth != null;

      // 생성: 인증된 사용자가 자신의 이름으로만 예약 생성 가능
      allow create: if request.auth != null &&
                       isOwner(request.resource.data.userId);

      // 수정: 관리자는 모든 필드를 수정할 수 있고,
      //       사용자는 'status'를 'cancelled'로만 변경 가능 (adminRole 기반)
      allow update: if request.auth != null &&
                       (hasAdminRole() ||
                        (isOwner(resource.data.userId) && isCancelling()));

      // 삭제: 관리자만 삭제 가능 (adminRole 기반)
      allow delete: if request.auth != null && hasAdminRole();
    }

    // 프로그램 신청(applications) - 강화된 보안
    match /applications/{applicationId} {
      // 읽기: 인증된 사용자는 모든 신청을 읽을 수 있음 (클라이언트에서 필터링)
      allow read: if request.auth != null;

      // 생성: 인증된 사용자가 자신의 이름으로만 신청 가능
      allow create: if request.auth != null &&
                       isOwner(request.resource.data.userId);

      // 수정/삭제: 관리자만 가능 (adminRole 기반)
      allow update, delete: if request.auth != null && hasAdminRole();
    }

    // 프로그램 신청(program_applications) - 기존 컬렉션명 호환성
    match /program_applications/{applicationId} {
      // 읽기: 인증된 사용자는 모든 신청을 읽을 수 있음 (클라이언트에서 필터링)
      allow read: if request.auth != null;

      // 생성: 인증된 사용자가 자신의 이름으로만 신청 가능
      allow create: if request.auth != null &&
                       isOwner(request.resource.data.userId);

      // 수정/삭제: 관리자만 가능 (adminRole 기반)
      allow update, delete: if request.auth != null && hasAdminRole();
    }

    // 운동 종목(sportTypes) - 관리자 전용
    match /sportTypes/{docId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && hasAdminRole();
    }

    // 알림(notifications) - 강화된 보안
    match /notifications/{notificationId} {
      // 읽기: 인증된 사용자는 자신의 알림만 읽을 수 있음
      allow read: if request.auth != null &&
                     (isOwner(resource.data.userId) || hasAdminRole());

      // 생성: 시스템에서만 생성 (관리자만)
      allow create: if request.auth != null && hasAdminRole();

      // 수정: 사용자는 읽음 상태만 변경 가능, 관리자는 모든 필드 수정 가능
      allow update: if request.auth != null &&
                       ((isOwner(resource.data.userId) && isReadStatusOnly()) ||
                        hasAdminRole());

      // 삭제: 관리자만 삭제 가능
      allow delete: if request.auth != null && hasAdminRole();
    }

    // --- 강화된 보안 함수 ---

    // 관리자 역할 확인 함수 (get() 호출 제거하여 순환 의존성 방지)
    function hasAdminRole() {
      // Firebase Auth Custom Claims 사용
      return request.auth.token.role == 'admin' ||
             request.auth.token.admin == true ||
             isAdminByEmail();
    }

    // 이메일 기반 관리자 확인 (추가 보안층)
    function isAdminByEmail() {
      return request.auth.token.email in [
        'admin@flexspace.test',
        'flexadmin@test.com',
        'joonake@naver.com',
        'uu@naver.com',
        'kan@naver.com',
        'kun6@naver.com'
      ];
    }

    // 요청자가 리소스의 소유자인지 확인하는 함수
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // 사용자가 예약을 취소하는 작업인지 확인하는 함수
    function isCancelling() {
      // status 필드만 변경되고, 그 값이 'cancelled'인지 확인
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']) &&
             request.resource.data.status == 'cancelled';
    }

    // 알림의 읽음 상태만 변경하는지 확인하는 함수
    function isReadStatusOnly() {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']) &&
             request.resource.data.read == true;
    }

    // 데이터 무결성 검증 함수들
    function isValidBookingData() {
      return request.resource.data.keys().hasAll(['userId', 'facilityId', 'date', 'startTime', 'endTime']) &&
             request.resource.data.userId is string &&
             request.resource.data.facilityId is string;
    }

    function isValidApplicationData() {
      return request.resource.data.keys().hasAll(['userId', 'programId']) &&
             request.resource.data.userId is string &&
             request.resource.data.programId is string;
    }

    // 시간 기반 제약 조건
    function isValidBookingTime() {
      return request.resource.data.date is timestamp &&
             request.resource.data.date > request.time;
    }
  }
}