---
description:
globs:
alwaysApply: true
---
# 체육관 일정·대관·프로그램 통합 관리 웹앱 ‑ PRD

## 1. 개요
대학 체육관 공간과 자체 프로그램(수업·강좌) 예약·관리를 하나의 웹 플랫폼에서 통합 운영하여, 관리자 업무 시간을 50% 이상 단축하고 예약 중복을 0%에 수렴하도록 만드는 것이 목표다. MVP 단계에서는 '캘린더 기반 예약/승인 흐름'과 '예약 중복 방지 로직'을 최우선 구현한다.

## 2. 시장·벤치마킹
* 학교 전용 예약 플랫폼(스포카 페이스핏 등)
* 글로벌 스포츠 시설 SaaS(Skedda, TeamUp)
> 강점: 직관적 캘린더, 실시간 중복 체크, 통계 대시보드
> 약점: 한국 대학 환경 맞춤형 기능 부족, 한글·다국어 미흡

## 3. Target User
* Primary: 대학 체육관 관리자·운영스태프
* Secondary: 재학생·교직원, 외부 단체(대관 신청자), 강사(프로그램 개설)

## 4. Pain Points
1. 수기·전화·이메일로 인한 업무 과부하
2. 실시간 일정 겹침 확인 어려움 → 중복 예약 발생
3. 다중 공간·코트 가용 시간 파악이 힘듦

## 5. Goals & Success Metrics
| 목표 | KPI |
| --- | --- |
| 승인·확정 프로세스 자동화 | 관리자 처리 시간 50%↓ |
| 예약 중복 방지 | 중복 발생 건수 0% |
| 가시성 향상 | 대시보드 조회당 평균 5초 이내에 가용 현황 파악 |

## 6. 주요 기능(스코프)
### 6.1 핵심 기능(MVP)
1. 캘린더 기반 대관 일정 조회·신청·승인(자동 중복 체크)
2. 체육관 프로그램 개설·신청·승인 관리
3. 실시간 알림(이메일/웹 푸시) – 승인·거절·변경
4. 관리자 대시보드 – 일/주/월 가용 현황 시각화
5. 수업 일정 입력 & 엑셀/CSV 업로드 → 자동 캘린더 반영

### 6.2 부가 기능(이후 Iteration)
1. 다중 체육관·코트 관리
2. 다국어 지원(한국어·영어)
3. 통계·리포트(이용률, 시간대별 사용량)
4. 외부 캘린더(Google/Outlook) 연동

## 7. 개발 전략
* Strategy: MVP → Agile Iteration
* 1순위: 중복 예약 방지 로직 + 승인 자동화
* 이후 차례대로 대시보드 고도화, 다국어·다중 공간 지원

## 8. 기능 우선순위 & 로드맵
| Sprint | 기능 | 설명 |
| --- | --- | --- |
| 0 | 시스템 아키텍처, DB 스키마 설계 | Firebase(Cloud Firestore) 기반 |
| 1 | 예약 신청/승인 API, 중복 체크 알고리즘 | Firebase Functions(Node.js) 기반 REST API |
| 2 | 캘린더 UI(일/주/월), 관리자 대시보드 1차 | shadcn/ui + TailwindCSS |
| 3 | 프로그램 개설/신청 모듈 | 정원 관리, 대기자 기능 포함 |
| 4 | 알림 서비스(E-mail, in-app) | Firebase Cloud Messaging + Nodemailer |
| 5 | 수업 일정 업로드(엑셀/CSV) | 파싱, 중복 검사 |
| 6+ | 통계·리포트, 다국어, 다중 체육관 등 | 지속 개선 |

## 9. 사용자 스토리(대표)
* "관리자로서, 캘린더에서 빈 시간을 클릭해 수업 일정을 블록 지정 후 저장하면, 해당 시간이 자동으로 '수업' 상태로 표시되길 원한다."
* "사용자로서, 원하는 날짜·시간을 선택해 대관 신청하면 즉시 중복 여부를 알려주고, 승인 결과를 알림으로 받아보고 싶다."
* "관리자로서, 대시보드에서 오늘과 이번 주의 코트별 예약 현황을 한눈에 보고 싶다."

## 10. 기술 스택(기본)
* Next.js 15 + TypeScript + TailwindCSS(shadcn/ui)
* Firebase(Cloud Firestore, Authentication, Hosting, Functions, Cloud Messaging)
* 상태관리: Zustand, 데이터 페칭: @tanstack/react-query + Firebase SDK
* 날짜 유틸: date-fns, 검증: Zod
* 파일 처리: Firebase Storage(엑셀/CSV 업로드용)

## 11. 리스크 & Mitigation
| 리스크 | 완화책 |
| --- | --- |
| 예약 중복 로직 복잡 | 단위 테스트·통합 테스트로 철저 검증, Firestore 트랜잭션 활용 |
| 관리자 UX 과부하 | 사용성 테스트로 반복 개선, 툴팁 추가 |
| 데이터 마이그레이션(엑셀 업로드) 오류 | 업로드 전 미리보기·검증 단계 제공 |
| Firebase 비용 증가 | Firestore 쿼리 최적화, 적절한 인덱싱, 데이터 구조 효율화 |

## 11.1 우선순위 명확화(결정 기반)
1) 컬렉션 명칭 통일 → 2) 규칙 경로 정합성 → 3) TRD 문서 보정(Next.js 기준) → 4) 규칙 유효성 함수 → 5) 인덱스 보강 + 중복 방지 설계

## 11.2 마이그레이션 전략(요약)
- 데이터: Supabase → Firestore 증분 마이그레이션(Export → Transform → Import), 체크섬 검증/샘플링,
  스테이징 리허설 후 컷오버
- 인증: Supabase Auth → Firebase Auth 전환, 재인증 플로우 안내, 임시 병행 기간 고려
- 실시간: Supabase Realtime → Firestore onSnapshot Listener로 이관
- API: 클라이언트 SDK 직호출 + 복잡 로직은 Cloud Functions(HTTP/Callable)

## 11.3 성능 최적화 보강
- 인덱스: 카디널리티 높은 필드 우선 순서(예: facilityId → startDate → startTime)
- 자동 정리: 완료된 예약은 스케줄드 Functions로 주기 삭제(TTL 유사)
- 페이지네이션: 커서 기반(startAfter) + 제한(limit)

## 11.4 에러 처리 및 롤백 계획
- 할당량 초과: 백오프/캐싱, 리스너 범위 최소화, 읽기 축소
- 손실 방지: 증분 마이그레이션 + 스냅샷 백업, 리허설 검증(체크섬)
- 롤백: 단계별 배포, 기능 플래그, 이전 스냅샷 즉시 복구 경로 확보

## 11.5 자가 검증 기준(추가)
- 성능: 주요 쿼리 응답 < 200ms
- 마이그레이션: 데이터 무결성 100%(체크섬/샘플 대조)
- 인증: 기존 사용자 로그인/세션 전환 정상
- 실시간: 예약 상태 변경 시 UI 즉시 반영
- 모니터링: 콘솔 에러율 < 1%

## 12. 승인
| 버전 | 작성 | 승인 |
| --- | --- | --- |
| 1.0 | Vooster PM Agent | 대기 |

---
**파일명**: gym-management-prd.md  
**생성일**: 2025년 8월 30일  
**버전**: 1.0  
**마지막 수정**: Firebase 기반 아키텍처로 업데이트