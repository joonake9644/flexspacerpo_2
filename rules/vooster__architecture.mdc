---
description:
globs:
alwaysApply: true
---
---
description: Firebase 기반 체육관 관리 웹앱을 위한 Technical Requirements Document
globs:
alwaysApply: true
---

# Technical Requirements Document (TRD) - Firebase Edition

## 1. Executive Technical Summary
- **Project Overview**: 대학 체육관의 일정, 대관, 프로그램 관리를 통합하는 웹 애플리케이션을 개발하여 관리자의 업무 효율성을 높이고 예약 중복을 방지한다. Next.js를 기반으로 shadcn/ui를 활용하여 직관적인 UI를 제공하고, Firebase를 통해 안정적인 백엔드 및 데이터 관리를 구축한다.
- **Core Technology Stack**: Next.js 15, TypeScript, TailwindCSS (shadcn/ui), Firebase (Authentication, Firestore, Functions, Hosting, Storage), @tanstack/react-query, date-fns를 사용하여 빠르고 효율적인 개발 환경을 구축한다.
- **Key Technical Objectives**:
    - 성능: 초기 로딩 속도 3초 이내, Firestore 쿼리 응답 시간 500ms 이내
    - 확장성: Firebase의 자동 스케일링을 활용하여 사용자 증가에 따른 트래픽을 효과적으로 처리
    - 안정성: Firestore 트랜잭션과 철저한 테스트를 통해 예약 중복 방지 및 데이터 무결성 확보
    - 실시간성: Firestore 실시간 리스너를 활용한 즉시 데이터 동기화
- **Critical Technical Assumptions**:
    - Firebase 서비스의 안정적인 제공을 가정
    - Firebase 할당량(Firestore 읽기/쓰기, Functions 실행 시간) 내에서 운영 가능함을 가정
    - 사용자의 네트워크 환경이 평균 이상임을 가정
    - 제공된 PRD 및 사용자 스토리의 정확성을 가정

## 2. Tech Stack

| Category          | Technology / Library        | Reasoning (Why it's chosen for this project) |
| ----------------- | --------------------------- | -------------------------------------------- |
| 프레임워크       | Next.js 15                  | 서버 사이드 렌더링, 최적화된 성능, 뛰어난 개발 경험 제공 |
| UI 컴포넌트       | shadcn/ui                   | TailwindCSS 기반, 재사용 가능한 UI 컴포넌트 제공, 디자인 시스템 일관성 유지 |
| 아이콘            | lucide-react                | 일관성있는 아이콘 제공, 쉬운 사용법 |
| 언어              | TypeScript                  | 타입 안정성, 코드 유지보수성 향상 |
| 스타일링          | TailwindCSS                 | 유틸리티 기반 CSS 프레임워크, 빠른 스타일링 및 반응형 디자인 지원 |
| 백엔드            | Firebase                    | NoSQL 데이터베이스(Firestore), 인증, 실시간 구독, 클라우드 함수 제공 |
| 인증              | Firebase Authentication     | 간편한 사용자 인증, 소셜 로그인, JWT 토큰 관리 |
| 데이터베이스      | Cloud Firestore            | NoSQL 문서 데이터베이스, 실시간 리스너, 오프라인 지원 |
| 서버리스 함수     | Firebase Functions          | Node.js 기반 서버리스 함수, 트리거 기반 자동 실행 |
| 호스팅            | Firebase Hosting            | 정적 사이트 호스팅, CDN, SSL 자동 설정 |
| 파일 저장소       | Firebase Storage            | 파일 업로드/다운로드, 보안 규칙 적용 |
| 데이터 페칭       | @tanstack/react-query + Firebase SDK | 서버 상태 관리, 캐싱, Firestore와의 효율적인 데이터 동기화 |
| 상태 관리        | zustand                     | 간단하고 유연한 상태 관리 라이브러리, 전역 상태 관리 용이 |
| 날짜 처리         | date-fns                    | 날짜 및 시간 관련 기능 제공, 다양한 포맷 지원 |
| 유틸리티 함수     | es-toolkit                  | 유용한 유틸리티 함수 모음, 개발 생산성 향상 |
| 푸시 알림         | Firebase Cloud Messaging   | 웹 푸시 알림, 멀티 플랫폼 지원 |

## 3. System Architecture Design

### Top-Level building blocks
- **Frontend (Next.js)**:
    - 사용자 인터페이스 및 사용자 경험을 담당.
    - 컴포넌트: 캘린더 UI, 대시보드, 신청 폼, 프로그램 관리 페이지.
    - Firebase SDK를 통한 직접적인 Firestore/Auth 연동.
- **Backend (Firebase)**:
    - 데이터베이스(Firestore), 인증(Auth), 서버리스 함수(Functions), 호스팅(Hosting), 저장소(Storage) 역할 담당.
    - 컴포넌트: Cloud Firestore, Firebase Auth, Cloud Functions, Firebase Storage.
- **API (Firebase Functions)**:
    - 서버 로직 및 비즈니스 로직 처리.
    - 기능: 복잡한 데이터 검증, 외부 API 연동, 이메일 발송, 스케줄링 작업.
- **External Services**:
    - 이메일 알림 서비스 (Firebase Functions + Nodemailer).
    - 엑셀/CSV 파싱 (Firebase Functions에서 처리).

### Top-Level Component Interaction Diagram

```mermaid
graph TD
    A[Frontend (Next.js)] --> B[Firebase SDK]
    B --> C[(Cloud Firestore)]
    B --> D[Firebase Auth]
    B --> E[Firebase Storage]
    A --> F[Firebase Functions (HTTP)]
    F --> C
    F --> G[External Services (Email/CSV)]
    H[Firebase Cloud Messaging] --> A
    I[Firebase Hosting] --> A
```

- Frontend (Next.js): Firebase SDK를 통해 Firestore, Auth, Storage와 직접 통신하며, 복잡한 로직은 Firebase Functions를 호출합니다.
- Firebase SDK: 클라이언트 측에서 Firebase 서비스들과의 인터페이스 역할을 합니다.
- Cloud Firestore: 모든 애플리케이션 데이터를 저장하고 실시간 동기화를 제공합니다.
- Firebase Auth: 사용자 인증 및 권한 관리를 담당합니다.
- Firebase Functions: 서버 사이드 로직, 이메일 발송, 데이터 검증 등을 처리합니다.
- Firebase Storage: 엑셀/CSV 파일 등의 파일 저장을 담당합니다.

### Code Organization & Convention
**Domain-Driven Organization Strategy**
- **Domain Separation**: 사용자 관리, 예약 관리, 프로그램 관리, 알림 관리 등으로 도메인 분리
- **Layer-Based Architecture**:
    - `components`: UI 컴포넌트
    - `app`: Next.js App Router 페이지
    - `lib/firebase`: Firebase 설정 및 유틸리티
    - `types`: 타입 정의 (Firestore 문서 타입 포함)
    - `hooks`: 커스텀 React Hooks (Firebase 연동 훅 포함)
- **Feature-Based Modules**: 예약 관련 기능은 `features/reservations` 폴더에, 프로그램 관련 기능은 `features/programs` 폴더에 구성
- **Shared Components**: 공통 UI 컴포넌트 (`Button`, `Input`, `Calendar`)는 `components/ui` 폴더에 위치

**Universal File & Folder Structure**
```
/
├── src/
│   ├── components/
│   │   ├── ui/           # shadcn/ui 컴포넌트
│   │   │   ├── button.tsx
│   │   │   ├── input.tsx
│   │   │   ├── calendar.tsx
│   │   │   └── ...
│   │   └── ...
│   ├── app/              # Next.js App Router
│   │   ├── page.tsx      # 메인 페이지
│   │   ├── reservations/ # 예약 관련 페이지
│   │   │   ├── page.tsx
│   │   │   ├── [id]/
│   │   │   │   └── page.tsx
│   │   │   └── ...
│   │   ├── programs/     # 프로그램 관련 페이지
│   │   │   ├── page.tsx
│   │   │   ├── [id]/
│   │   │   │   └── page.tsx
│   │   │   └── ...
│   │   └── ...
│   ├── features/         # 기능별 모듈
│   │   ├── reservations/ # 예약 관련 기능
│   │   │   ├── components/
│   │   │   ├── hooks/
│   │   │   ├── api.ts    # Firestore 작업 함수
│   │   │   └── types.ts
│   │   ├── programs/     # 프로그램 관련 기능
│   │   │   ├── components/
│   │   │   ├── hooks/
│   │   │   ├── api.ts
│   │   │   └── types.ts
│   │   └── ...
│   ├── lib/
│   │   ├── firebase/     # Firebase 설정
│   │   │   ├── config.ts
│   │   │   ├── firestore.ts
│   │   │   ├── auth.ts
│   │   │   └── storage.ts
│   │   ├── utils.ts      # 유틸리티 함수
│   │   └── ...
│   ├── types/
│   │   ├── firebase.ts   # Firebase/Firestore 관련 타입
│   │   ├── reservation.ts
│   │   ├── program.ts
│   │   └── ...
│   └── hooks/
│       ├── useAuth.ts    # Firebase Auth 훅
│       ├── useFirestore.ts # Firestore 훅
│       └── ...
├── functions/            # Firebase Functions
│   ├── src/
│   │   ├── index.ts
│   │   ├── email/
│   │   ├── reservations/
│   │   └── ...
│   ├── package.json
│   └── ...
├── firestore.rules       # Firestore 보안 규칙
├── storage.rules         # Storage 보안 규칙
├── firebase.json         # Firebase 설정
└── ...
```

### Data Flow & Communication Patterns
- **Client-Firestore Direct Communication**: Frontend에서 Firebase SDK를 통해 Firestore와 직접 통신하여 실시간 데이터 동기화를 구현합니다.
- **Authentication Flow**: Firebase Auth를 사용하여 사용자 인증 상태를 관리하고, 토큰 기반 인증을 구현합니다.
- **Server-Side Logic**: 복잡한 비즈니스 로직이나 외부 서비스 연동은 Firebase Functions를 통해 처리합니다.
- **File Upload Flow**: Firebase Storage를 사용하여 엑셀/CSV 파일 업로드를 처리하고, Functions에서 파싱을 수행합니다.
- **Real-time Updates**: Firestore 리스너를 사용하여 데이터 변경 사항을 실시간으로 UI에 반영합니다.
- **Push Notifications**: Firebase Cloud Messaging을 통해 웹 푸시 알림을 구현합니다.

## 4. Performance & Optimization Strategy
- **이미지 최적화**: Next.js Image 컴포넌트를 사용하여 이미지 크기를 최적화하고, lazy loading을 적용합니다.
- **코드 분할**: Next.js의 Dynamic Import 기능을 사용하여 초기 로딩 시간을 단축합니다.
- **Firestore 쿼리 최적화**: 
    - 필요한 데이터만 조회하도록 쿼리를 최적화합니다.
    - 복합 인덱스를 적절히 활용하여 검색 성능을 향상시킵니다.
    - 페이지네이션을 구현하여 대량 데이터 로딩을 최적화합니다.
- **캐싱 전략**: 
    - `@tanstack/react-query`를 사용하여 Firestore 데이터를 효율적으로 캐싱합니다.
    - Firebase의 오프라인 캐싱 기능을 활용합니다.
- **Firebase Functions 최적화**:
    - Cold start 시간을 줄이기 위해 함수를 적절히 분할합니다.
    - 메모리 할당을 최적화하여 비용을 절약합니다.
- **Firestore 비용 최적화**:
    - 불필요한 읽기/쓰기 작업을 최소화합니다.
    - 실시간 리스너를 효율적으로 관리합니다.

## 5. Implementation Roadmap & Milestones
### Phase 1: Foundation (MVP Implementation)
- **Core Infrastructure**: 
    - Next.js 프로젝트 설정, Firebase 프로젝트 생성 및 연동
    - Firestore 데이터베이스 스키마 설계
    - Firebase Authentication 설정
    - 기본 UI 컴포넌트 구현 (shadcn/ui)
- **Essential Features**: 
    - 캘린더 기반 대관 일정 조회/신청/승인 (Firestore 실시간 리스너 활용)
    - 프로그램 개설/신청/승인 관리
    - Firebase Cloud Messaging을 통한 실시간 알림
- **Basic Security**: 
    - Firestore 보안 규칙 구현
    - Firebase Auth를 사용한 사용자 인증 및 권한 관리
- **Development Setup**: 
    - Firebase Emulator Suite 설정
    - CI/CD 파이프라인 구축 (Firebase Hosting 배포 자동화)
- **Timeline**: 8주

### Phase 2: Feature Enhancement
- **Advanced Features**: 
    - 다중 체육관/코트 관리 (Firestore 서브컬렉션 활용)
    - 통계/리포트 (Firebase Functions를 통한 데이터 집계)
    - 외부 캘린더 연동 (Firebase Functions에서 Google Calendar API 연동)
- **Performance Optimization**: 
    - Firestore 쿼리 최적화 및 인덱스 튜닝
    - Firebase Functions 성능 개선
    - 캐싱 전략 고도화
- **Enhanced Security**: 
    - Firestore 보안 규칙 고도화
    - Firebase Security Rules Testing 구현
- **Monitoring Implementation**: 
    - Firebase Analytics 연동
    - Firebase Performance Monitoring 설정
    - Firebase Crashlytics (필요시)
- **Timeline**: 12주

## 6. Risk Assessment & Mitigation Strategies
### Technical Risk Analysis
- **Technology Risks**: Firebase 생태계에 대한 학습 곡선, NoSQL 데이터 모델링의 복잡성
    - **Mitigation Strategies**: Firebase 공식 문서 학습, 커뮤니티 활용, NoSQL 설계 패턴 연구
- **Performance Risks**: 
    - Firestore 읽기/쓰기 비용 증가
    - Firebase Functions Cold Start 지연
    - **Mitigation Strategies**: 쿼리 최적화, 캐싱 전략 적용, Functions 워밍업 전략
- **Security Risks**: 
    - Firestore 보안 규칙 설정 오류
    - 클라이언트 사이드 데이터 노출
    - **Mitigation Strategies**: 보안 규칙 테스트 자동화, 서버 사이드 검증 강화
- **Scalability Risks**: 
    - Firestore 할당량 초과
    - Firebase Functions 동시 실행 제한
    - **Mitigation Strategies**: 사용량 모니터링, 적절한 요금제 선택, 아키텍처 최적화
- **Vendor Lock-in Risks**: Firebase 종속성 증가
    - **Mitigation Strategies**: 비즈니스 로직과 Firebase 로직 분리, 추상화 레이어 구현

### Project Delivery Risks
- **Timeline Risks**: 개발 일정 지연 (Firebase 학습 시간 포함)
    - **Contingency Plans**: 우선순위 조정, Firebase 전문가 컨설팅, 단계별 배포
- **Resource Risks**: Firebase 전문 인력 부족
    - **Contingency Plans**: 팀 교육 투자, 외부 Firebase 전문가 활용
- **Cost Risks**: Firebase 사용 비용 예상 초과
    - **Contingency Plans**: 사용량 모니터링 강화, 비용 최적화 전략 적용
- **Quality Risks**: Firestore 데이터 일관성 문제
    - **Contingency Plans**: 트랜잭션 활용, 데이터 검증 로직 강화, Firebase Emulator를 통한 철저한 테스트
- **Deployment Risks**: Firebase 배포 과정에서의 오류 발생
    - **Contingency Plans**: Firebase CLI를 통한 자동 배포, 스테이징 환경 구축, 롤백 전략 수립

### Firebase-Specific Risk Considerations
- **Service Availability**: Firebase 서비스 장애
    - **Mitigation**: Firebase Status 모니터링, 대체 백업 전략
- **Data Migration**: Firestore 데이터 구조 변경의 어려움
    - **Mitigation**: 버전 관리 전략, 점진적 마이그레이션 계획
- **Security Rules Complexity**: 복잡한 보안 규칙로 인한 성능 저하
    - **Mitigation**: 보안 규칙 최적화, 정기적인 성능 테스트

## 7. Decision Alignment (Authoritative)
- 컬렉션 명칭: `bookings` 유지
- 프로그램 신청 컬렉션: `program_applications` 사용
- 시간 경계 규칙: 종료시간 == 시작시간은 비겹침으로 간주

## 8. Prioritized Execution Order
1) 컬렉션 명칭 통일(결정 반영)
2) Firestore 규칙 경로 정합성 수정(`/program_applications`)
3) 문서 정합화(본 TRD 기준으로 PRD/Change 동기화)
4) 규칙 유효성 함수 추가(booking/program)
5) 인덱스 보강 + 중복 방지 설계/구현

## 9. Migration Plan (Supabase → Firebase)
- 데이터: Export → Transform(JSON/NDJSON) → Import(Emulator→Staging→Prod) 증분 방식, 체크섬/샘플 대조
- 인증: Supabase Auth → Firebase Auth 이관(재인증 플로우/브릿지 로그인 공지), 사용자 UID 매핑 표 유지
- 실시간: Supabase Realtime → Firestore onSnapshot Listener로 대체
- API: 클라이언트 SDK 직호출 + 복잡 로직은 Cloud Functions(HTTP/Callable) 이동
- 다운타임 최소화: 스테이징 리허설 후 짧은 컷오버, 롤백 스냅샷 사전 확보

## 10. Performance Deep-Dive
- 인덱스 전략: 높은 카디널리티 우선(예: `facilityId` → `startDate` → `startTime`), 커서 기반 페이지네이션(startAfter)
- 비용 절감: 필요한 필드만 select(서버에서 가공 금지), 리스너 범위 최소화, 캐시/메모이제이션 활용
- 자동 정리: 완료된 예약 주기 삭제(스케줄드 Functions)로 TTL 유사 동작

## 11. Error Handling & Rollback
- 할당량 초과: 백오프/재시도, 오프라인 퍼스트 캐시, 비핵심 리스너 일시 중단
- 데이터 손실 방지: 단계별 증분 마이그레이션, 스냅샷/백업, 리허설 검증(체크섬)
- 롤백: 기능 플래그, 이전 릴리즈 아티팩트/데이터 스냅샷 즉시 복구 경로 문서화

## 12. Rules Validation Additions (Planned)
- `isValidBooking(d)`: 필수 필드, 타입, `start<end`, 운영시간/최대 예약시간 정책
- `isValidProgram(d)`: 필수 필드, 스케줄/용량 유효성
- 상태 전이: `pending→approved/rejected`, `approved→cancelled/completed` 등 허용 전이만 승인

## 13. Index Plan (firestore.indexes.json)
- `bookings`: (`facilityId` ASC, `startDate` ASC, `startTime` ASC)
- `bookings`: (`userId` ASC, `status` ASC, `createdAt` DESC)
- `program_applications`: (`programId` ASC, `status` ASC, `appliedAt` DESC)

## 14. Phased Plan (Next.js Baseline)
- Phase 1 (1-2일): 결정 반영, Firebase 프로젝트/환경 구성(dev/stg/prod)
- Phase 2 (3-5일): SDK/인증/쿼리 로직 마이그레이션
- Phase 3 (2-3일): 보안 규칙 구현/테스트, 인덱스 최적화, 중복 방지 구현
- Phase 4 (2-3일): 통합/성능 테스트, 스테이징 데이터 이행, 프로덕션 배포/모니터링

## 15. Self-check (Gates)
- 성능: 주요 쿼리 < 200ms
- 무결성: 데이터 100% 일치(체크섬)
- 인증: 기존 사용자 무중단 전환
- 실시간: 예약 상태 변경 UI 즉시 반영
- 모니터링: 에러율 < 1%